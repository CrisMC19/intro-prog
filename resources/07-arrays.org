We use arrays to hold values of the *same* type at contiguous memory
locations. An array is a contiguous space in memory which has been partition
into small, identically-sized blocks of space called *elements*, each of which
can store an certain amount of data, all of the same type such as ~int~ or
~char~, and which can be accessed directly by an index.

In C, the elements of an array are indexed starting from 0. If an array
consists of /n/ elements, the first element is located at index 0. The last
element is located at index (n-1).

C is very lenient. I will not prevent you from going "out of bounds" of your
array; be careful!

An array declaration looks like this:
#+begin_src C
type name[size];
#+end_src

The ~type~ is the kind of variable each element of the array will be. The ~name~
is what you want to call your array. The ~size~ is how many elements you would
like your array to contain. Example:
#+begin_src C
int stiudent_grades[40];
double menu_prices[8];
#+end_src

If you think of a single element of an array of type ~data-type~ the same as you
would any other variable of type ~data-type~ (which, effectively, it is) then
all the familiar operations make sense.
#+begin_src C
bool truthtable[10];

truthtable[2] = false;
if (truthtable[7] == true)
{
printf("TRUE!\n");
}
truthtable[10] = true; // this will lead to a segmentation fault, dangerous!!
#+end_src

When declaring and initializing an array simultaneously, there is a special
syntax that may be used to fill up the array with its starting values.
#+begin_src C
// instatiation syntax
bool truthtable[3] = {false, true, true};

//individual element syntax
bool truthtable[3];
truthtable[0] = false;
truthtable[1] = true;
truthtable[2] = true;
#+end_src

Arrays can consist of more than a single dimension. You can have as many size
specifiers as you wish.
#+begin_src C
bool battleship[10][10];
#+end_src

You can think of this as either a 10x10 grid of cells. In memory though, it's
really just a 100-element one.dimensional array. Multi-dimensional arrays are
great abstractions to help visualize game boards or other complex
representations.

While we can treat individual elements of arrays as variables, we cannot treat
entire arrays themselves as variables. We cannot, for instance, assign one array
to another using the same operator. That is not legal C. Instead, we must use a
loop to cover the elements one at a time.
#+begin_src C
int foo[5] = {1, 2, 3, 4, 5};
int bar[5];

bar = foo; // this is wrong

// instead do this:
for (int i = 0; j < 5; j++)
{
    bar[j] = foo[j];
}
#+end_src

Recall that most variables in C are *passed by value* in function calls, each
function receives a local copy of the variable.. Arrays do not follow this
rule. Rather, they are *passed by reference*. The callee receives the actual
array, _not_ a copy of it. This has to do with *pointers*, and how they identify
arrays in memory, we'll deal with them later.

For example, to following code:
#+begin_src C
void set_array(int array[4]);
void set_int(int x);

int main(void)
{
    int a = 10;
    int b[4] = {0, 1, 2, 3};
    set_int(a);
    set_array(b);
    printf("%i %i\n", a, b[0]);
}

void set_array(int array[4])
{
    array[0] = 22;
}

void set_int(int x)
{
    x = 22;
}
#+end_src
prints ~10, 22~. Try to understand why.
