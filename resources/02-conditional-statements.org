Conditional expressions allow your programs to make decisions and take different
forks in the road, depending on the values of variables or user input.

C provides a few different ways to implement conditional expressions (also known
as /branches/) in your programs.

* if
#+begin_src C
if (boolean-expression)
{

}
#+end_src

If the ~boolean-expression~ evaluates to *true*, all lines of code between the
curly braces will execute in order from top-to-bottom.

If the ~boolean-expression~ evaluates to *false*, those lines of code will not
execute.

* if-else
#+begin_src C
if (boolean-expression)
{

}
else
{

}
#+end_src

If the ~boolean-expression~ is *true*, all lines of code between the first set
of curly braces will execute in order from top-to-bottom.

If the ~boolean-expression~ evaluates to *false*, all lines of code between the
second set of curly braces will execute in order from top-to-bottom.

* if-else-if-else chain
#+begin_src C
if (boolean-expr1)
{
    // first branch
}
else if (boolean-expr2)
{
    // second branch
}
else if (boolean-expr3)
{
    // third branch
}
else
{
    // fourth branch
}
#+end_src

In C, it is possible to create an *if-else if-else* chain. As you would expect,
each branch is mutually exclusive.

* switch statement
#+begin_src C
int x = GetInt();
switch(x)
{
 case 1:
     printf("One!\n");
     break;
 case 2:
     printf("Two!\n");
     break;
 case 3:
     printf("Three!\n");
     break;
 default:
     printf("Sorry!\n");
     break;
}
#+end_src

C's ~switch()~ statement is a conditional statement that permits enumeration of
discrete cases, instead of relying on Boolean expressions. It is important to
~break;~ between each case, or you will "fall through" each case (unless that is
the desired behavior).

* ternary operator ? :

The following snippets of code act identically.
#+begin_src C
int x;
if (expr)
{
    x = 5;
} else
{
    x = 6;
}
#+end_src

#+begin_src C
int x = (expr) ? 5 : 6;
#+end_src

The ternary operator (~? :~) is mostly a cute trick, but it is useful for
writing trivially short conditional branches. Be familiar with it, but know that
you won't need to write it if you don't want to.

