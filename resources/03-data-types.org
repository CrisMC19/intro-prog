* int
Stores integers. Integers always take up 4 bytes of memory (32 bits). This means
the range of values they can store is necessarily limited to 32 bits of
worthwhile information.

Range: -2^{31} - 2^{31}-1

* unsigned int
~unsigned~ is a /qualifier/ that can be applied to certain types (including
~int~), which effectively doubles positive range of variables for that type, at
the cost of disallowing negative values.

Range: 0 - 2^{32}-1

* char
The ~char~ data type is used for variables that will store single characters.

Characters always take up 1 byte of memory (8 bits). This means the range of
values they can store is necessarily limited to 8 bits worth of information.

Thanks to ASCII, we've developed a mapping of characters like A, B, c, etc... to
numeric values in the positive side of this range.

Range: -128 - 127

* float
The ~float~ data type is used for variables that will store floating-point
values, also known as /real numbers/.

Floating point values always take up 4 bytes of memory (32 bits).

It's a little complicated to describe the range of ~float~, but it suffice to
say with 32 bits of precision, some of which might be used for an integer part,
we are limited to how precise we are. With ~float~ we have available
approximately 8 significant digits.

* double
The ~double~ data type is used for variables that will store floating-point
values, also known as /real numbers/.

The difference is that doubles are /double precision/. They always take up to 8
bytes if memory (64 bits). With ~double~ we have available approximately 16
significant figures.

* void
Is a type, but not a /data type/.

Functions can have a ~void~ return type, which just means they don't return a
value.

The parameter list of a function can also be ~void~. It simply means the
function takes no parameters.

* CS50 bool
Defined in cs50.h, the ~bool~ data type is used for variables that will store a
Boolean value. More precisely, they are capable only of storing two values:
~true~ and ~false~.

* CS50 string
The ~string~ data type is used for variables that will store a series of
characters, which programmers typically call a /string/.

* structs

* typedefs

* Creating a variable
To bring a variable into existence, you need to specify the data type of the
variable and give it a name.
#+begin_src C
int number;
char letter;
#+end_src

If you wish to create multiple variables of the same type, you specify the name
/once/, and then list as many variables of the type as you want.
#+begin_src C
int height, width;
float sqrt2, sqrt3, pi;
#+end_src

In general, it's good practice to only /declare/ variables when you need them.

* Using a variable
After a variable has been /declared/, it's no longer necessary to specify that
variable's type. (In fact, doing so has some unintended consequences!)
#+begin_src C
int number;     // declaration
number = 17;    // assignment
char letter;    // declaration
letter = 'H'    // assignment
#+end_src

If you are simultaneously declaring and setting the value of a variable
(sometimes called /initializing/), you can consolidate this to one step.
#+begin_src C
int number = 17;    // initialization
char letter = 'H';  // initialization
#+end_src
