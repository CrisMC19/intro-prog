Loops allow your programs to execute lines of code repeatedly, saving you from
needing to copy and paste or otherwise repeat lines of code.

C provides a few different ways to implement loops in your program.

* while(true) infinite loop
#+begin_src C
while (true)
{

}
#+end_src

This is what we call an /infinite/ loop. The lines of code between the curly
braces will execute repeatedly from top to bottom, until and unless we break out
of it (as  with a ~break;~ statement) or otherwise kill our program.

* while
#+begin_src C
while (boolean-expr)
{

}
#+end_src

If the ~boolean-expr~ evaluates to ~true~, all lines of code  between the curly
braces will execute repeatedly, in order from top-to-bottom, until
~boolean-expr~ evaluates to ~false~.

* do-while
#+begin_src C
do
{

}
while (boolean-expr);
#+end_src

This loop will execute all lines of code between the curly braces once, and
then, if the ~boolean-expr~ evaluates to ~true~, will go back and repeat that
process until ~boolean-expr~ evaluates to ~false~.

* for
#+begin_src C
for (int i = 0; i < 10; i++)
{

}
#+end_src
~for~ loops are used to repeat the body of a loop a specified number of times,
in this example 10.

The process undertaken in a ~for~ loop is:
- The counter variable(s) (here ~i~) is set
- The Boolean expression is checked.
  - If it evaluates to ~true~, the body of the loop executes.
  - If it evaluates to ~false~, the body of the loop does not execute.
- The counter variable is incremented, and then the Boolean expression is
  checked again, etc.

The ~for~ loop is actually much more versatile, as the statements inside the
parenthesis can be any valid statement:
#+begin_src C
for (start; expr; increment)
{

}
#+end_src

The process undertaken in a ~for~ loop, actually, is:
- The statement(s) in ~start~ are executed
- The ~expr~ is checked.
  - If it evaluates to ~true~, the body of the loop executes.
  - If it evaluates to ~false~, the body of the loop does not execute.
- The statement(s) in ~increment~ are executed, and then the ~expr~ is checked
  again, etc.
